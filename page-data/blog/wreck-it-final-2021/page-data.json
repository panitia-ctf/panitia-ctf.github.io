{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/wreck-it-final-2021/",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"custom-encryption-reversing\" style=\"position:relative;\"><a href=\"#custom-encryption-reversing\" aria-label=\"custom encryption reversing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Encryption (Reversing)</h2>\n<p>We solve the problem without reversing or knowing the exact algorithm ðŸ‘€</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\nenc <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'CustomEncryption'</span><span class=\"token punctuation\">,</span> cyclic<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> level<span class=\"token operator\">=</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n\nresult<span class=\"token punctuation\">,</span> log <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Decrypt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> guess <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span>printable<span class=\"token punctuation\">:</span>\n            p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token string\">'CustomEncryption'</span><span class=\"token punctuation\">,</span>\n                result <span class=\"token operator\">+</span> guess <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> level<span class=\"token operator\">=</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span>\n\n            GAP <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">6</span>\n\n            log<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> guess<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> enc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>GAP<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>GAP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">+=</span> guess\n                <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">break</span>\n\nlog<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Wreck IT Final 2021","date":"2021-12-21","description":"Wreck IT Final 2021","image":{"childImageSharp":{"resize":{"src":"/static/84b46311d76552b396f158172a9ce473/c7a62/0bd7bdea67b10e8cfba0d283a77a4b71c5dd51f0.jpg","height":630,"width":1200}}}}},"site":{"siteMetadata":{"siteUrl":"https://panitia-ctf.github.io"}}},"pageContext":{"slug":"/wreck-it-final-2021/","previousPost":null,"nextPost":{"title":"NCWCTF Qual 2021","slug":"/ncwctf-qual-2021/"}}},
    "staticQueryHashes": ["3868140423","823517391"]}